package com.example.demo;


import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtService {
	
	private static final String SECRET_KEY = "6YQTy9z9jumZ9CWjx0VkJmkUjAAyqmfI2XGWakNkcxXa5FZUfKrXMHuTJ52G5EtE";
	
	@Autowired
	private TokenRepository tokenRepository;
	
	public String extractUsername(String jwtToken) {
		return extractClaims(jwtToken, Claims::getSubject);
	}
	
	public<T> T extractClaims(String JwtToken, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(JwtToken);
		return claimsResolver.apply(claims);
	}
	
	public Claims extractAllClaims(String jwtToken) {
		return Jwts.parserBuilder()
				.setSigningKey(getSignKey())
				.build()
				.parseClaimsJws(jwtToken)
				.getBody();
	}
	
	private Key getSignKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
		return Keys.hmacShaKeyFor(keyBytes);
	}
	
	public String generateToken(String email)
	{
		return createToken(new HashMap<String, Object>(), email);
	}

	private String createToken(Map<String, Object> claims, String email)
	{
		return Jwts.builder()
				.setClaims(claims)
				.setSubject(email)
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 30))
				.signWith(getSignKey())
				.compact();
	}
	
	public boolean isTokenValid(String jwtToken, UserData userDetails) {
		final String userName = extractUsername(jwtToken);
		return (userName.equals(userDetails.getUsername())) && !isTokenExpired(jwtToken);
	}
	
	private boolean isTokenExpired(String jwtToken) {
		return extractExpiration(jwtToken).before(new Date());
	}
	
	private Date extractExpiration(String jwtToken) {
		return extractClaims(jwtToken, Claims::getExpiration);
	}
	
	public String validate(String jwtToken)
	{
		Jwts.parser()
				.verifyWith(getSignKey())
				.build()
				.parseSignedClaims(jwtToken);
		TokenRecord te = tokenRepository.findByToken(jwtToken)
				.get();
		if (!te.isValid() || isTokenExpired(jwtToken))
		{
			throw new RuntimeException("Invalid Token");
		}
		return te.getRole();
	}
}
