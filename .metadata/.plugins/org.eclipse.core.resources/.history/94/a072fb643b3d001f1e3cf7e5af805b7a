package com.example.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthenticationService {
	private final UserDataRepository userDataRepository;
	
	private final PasswordEncoder passwordEncoder;
	
	private final JwtService jwtService;
	
	private final AuthenticationManager authManager;
	
	private final TokenRepository tokenRepository;
	
	public AuthenticationResponse register(RegisterRequest request) {

		var user = UserData.builder()
				.uName(request.getUName())
				.uEmail(request.getUEmail())
				.uPassword(passwordEncoder.encode(request.getUPassword()))
				.role(Role.USER)
				.build();
		
		// user.setPassword(passwordEncoder.encode(user.getPassword()));
		userDataRepository.save(user);
		String jwtToken = jwtService.generateToken(user);
		var token = TokenRecord.builder()
				.usertoken(UserToken
						.builder()
						.uEmail(request.getUEmail())
						.token(jwtToken)
						.build())
				.status(true)
				.build();
		tokenRepository.save(token);
;		return AuthenticationResponse
				.builder()
				.token(jwtToken)
				.build();
	}
	

	public AuthenticationResponse login(AuthenticationRequest request) {
			authManager.authenticate(new UsernamePasswordAuthenticationToken(
					request.getUEmail(), request.getUPassword()));
			
			var user = userDataRepository.findByuEmail(request.getUEmail()).orElseThrow();
			String jwtToken = jwtService.generateToken(user);
			return AuthenticationResponse
					.builder()
					.token(jwtToken)
					.build();
	}
	
	public void logout(String jwtToken)
	{
		TokenRecord token = tokenRepository.findByToken(jwtToken)
				.get();
		token.setValid(false);
		tokenRepository.save(token);
		System.out.println("Logged Out");
	}
}
